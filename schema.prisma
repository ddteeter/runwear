datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

generator kysely {
  provider = "prisma-kysely"
}

generator client {
  provider = "prisma-client-js"
}

// START AUTH PRISMA ADAPTER
// https://authjs.dev/reference/adapter/prisma#create-the-prisma-schema-from-scratch
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  articles      Article[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
// END AUTH PRISMA ADAPTER

enum TempRuns {
  VERY_COLD
  COLD
  NORMAL
  WARM
  VERY
}

model Activity {
  id String @id @default(cuid())
  name String
  at DateTime
  durationSeconds Int
  latitude Decimal
  longitude Decimal
  workout LinkedWorkout?
  outfit Outfit?
}

model Outfit {
  id String @id @default(cuid())
  date DateTime @db.Date
  activity Activity? @relation(fields: [activityId], references: [id])
  activityId String @unique
  articles OutfitArticle[]
  conditions Conditions?
}

model Conditions {
  id String @id @default(cuid())
  temperature Decimal
  perceivedTemperature Decimal?
  humidity Int?
  windSpeed Int?
  windDirection String?
  precipitationType String?
  precipitationIntensity Int?
  outfit Outfit @relation(fields: [outfitId], references: [id])
  outfitId String @unique
  dataSource WeatherDataSource
  dataSourceUrl String?
}

enum WeatherDataSource {
  MANUALLY_ENTERED
  APPLE_WEATHER_KIT
}

model LinkedWorkout {
  id String @id @default(cuid())
  globalId String @unique
  url String
  source WorkoutSource
  activity Activity @relation(fields: [activityId], references: [id])
  activityId String @unique
}

enum WorkoutSource {
  STRAVA
  GARMIN
  APPLE_HEALTH
}

model OutfitArticle {
  id String @id @default(cuid())
  outfit Outfit @relation(fields: [outfitId], references: [id])
  outfitId String
  article Article @relation(fields: [articleId], references: [id])
  articleId String
  layer Layer?
}

model Article {
  id String @id @default(cuid())
  brand Brand @relation(fields: [brandId], references: [id])
  brandId String
  user User @relation(fields: [userId], references: [id])
  userId String
  name String
  year Int?
  url String?
  bodyPart BodyPart
  outfits OutfitArticle[]
}

enum BodyPart {
  HEAD
  FACE
  NECK
  ARMS
  HANDS
  TORSO
  LEGS
  FOOT
}

enum Layer {
  BASE
  MID
  OUTER
}

model Brand {
  id String @id @default(cuid())
  name String @unique
  url String?
  articles Article[]
}

model Queue {
  id String @id @default(cuid())
  timeInserted DateTime @default(now())
  payload Json
  qualifier QueueQualifier
}

enum QueueQualifier {
  STRAVA_WEBHOOK
}